import{_ as e,r as t,o,c,a as n,b as a,d as p,e as i}from"./app-45971387.js";const l="/assets/校招集训营笔面试算法/基本语法回顾/1.png",r="/assets/校招集训营笔面试算法/STL介绍/1.png",u={},d={class:"hint-container tip"},k=n("p",{class:"hint-container-title"},"资料来源与说明",-1),h=n("br",null,null,-1),_={href:"https://www.nowcoder.com/study/live/692",target:"_blank",rel:"noopener noreferrer"},m=i('<h2 id="_1-1-基本语法回顾" tabindex="-1"><a class="header-anchor" href="#_1-1-基本语法回顾" aria-hidden="true">#</a> 1.1 基本语法回顾</h2><h3 id="函数和递归" tabindex="-1"><a class="header-anchor" href="#函数和递归" aria-hidden="true">#</a> 函数和递归</h3><figure><img src="'+l+`" alt="函数和递归" tabindex="0" loading="lazy"><figcaption>函数和递归</figcaption></figure><p>注意函数调用中局部变量和全局变量的辨别，容易想当然的出错！如上图所示，尽管<code>f(x)</code>函数内进行了x相关的加减操作，但是那是对形参x的操作，并不是对外部实参中x变量进行操作，这两者只是变量名相同实际上并不是相同的，形参x在函数块结束后就销毁了对外面那个实参x没有任何影响！这里容易混淆，y就不用说了，全局变量函数内直接修改。所以答案应该是<code>x为1，y为4</code>。</p><h2 id="_1-2-stl介绍" tabindex="-1"><a class="header-anchor" href="#_1-2-stl介绍" aria-hidden="true">#</a> 1.2 STL介绍</h2><blockquote><p><code>#include&lt;bits/stdc++.h&gt;</code>算法万能头</p></blockquote><h3 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> vector</h3><p>vector容器是一个可变长度的数组，底层实现为动态数组。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>a<span class="token punctuation">;</span> <span class="token comment">//vector的定义</span>
a<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在容器a的最后新增一个数x</span>
a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//调用a的下标i对应的数</span>
<span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对a数组（升序）排序</span>
a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//查看a的长度，一般用在循环结构遍历</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>vector在算法中常用来代替数组(大多数情况),优缺点如下：</p><ul><li>优点：不用担心数组开小了后面有越界风险</li><li>缺点：代码方面有点复杂</li></ul><figure><img src="`+r+'" alt="vector常用用法" tabindex="0" loading="lazy"><figcaption>vector常用用法</figcaption></figure><p><strong>总结：</strong></p><p>图论一般要二维的链表数组建立邻接表或者二维数组建立邻接矩阵，可以使用容器数组<code>vector&lt;int&gt; a[num]</code>代替实现链表数组，比链表数组更方便，利用其长度可变性优化业务逻辑。</p><h3 id="stack-queue-deque-priority-queue" tabindex="-1"><a class="header-anchor" href="#stack-queue-deque-priority-queue" aria-hidden="true">#</a> stack/queue/deque/priority_queue</h3><p>stack</p>',16);function v(f,g){const s=t("ExternalLinkIcon");return o(),c("div",null,[n("div",d,[k,n("p",null,[a("本部分是学习算法课时的笔记，仅代表个人认为比较重要的点的记录，方便日后回顾知识点。由于秋招时间紧，快速过一遍重点，视频中一些基础我就略过不记录，想知道全貌可以点击下方链接进行学习："),h,n("a",_,[a("牛客/学习/校招集训营/笔面试算法"),p(s)])])]),m])}const b=e(u,[["render",v],["__file","校招集训营笔面试算法.html.vue"]]);export{b as default};
